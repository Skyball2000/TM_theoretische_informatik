# Entwerfen Sie Turingmaschinen für die folgende Sprache:
# {wwR : w ist beliebige Zeichenreihe aus Nullen und Einsen}.
# Hierbei bezeichnet wR das umgedrehte Wort von w, also w rückwärts gelesen.
alphabet:
  - "0"
  - "1"
  - "|"
  - "a"
  - "b"
transition:
  - "(PLACE_DELIMITER_AT_END_OF_REGULAR_SEQUENCE, 1) -> (R, PLACE_DELIMITER_AT_END_OF_REGULAR_SEQUENCE, 1)"
  - "(PLACE_DELIMITER_AT_END_OF_REGULAR_SEQUENCE, 0) -> (R, PLACE_DELIMITER_AT_END_OF_REGULAR_SEQUENCE, 0)"
  - "(PLACE_DELIMITER_AT_END_OF_REGULAR_SEQUENCE, #) -> (L, WALK_BACK_AND_COPY_REGULAR_SEQUENCE_IS_ON_REGULAR_SEQUENCE, |)"

  - "(WALK_BACK_AND_COPY_REGULAR_SEQUENCE, 0) -> (L, WALK_BACK_AND_COPY_REGULAR_SEQUENCE, 0)"
  - "(WALK_BACK_AND_COPY_REGULAR_SEQUENCE, 1) -> (L, WALK_BACK_AND_COPY_REGULAR_SEQUENCE, 1)"
  - "(WALK_BACK_AND_COPY_REGULAR_SEQUENCE, |) -> (L, WALK_BACK_AND_COPY_REGULAR_SEQUENCE_IS_ON_REGULAR_SEQUENCE, |)"
  - "(WALK_BACK_AND_COPY_REGULAR_SEQUENCE, #) -> (R, RESTORE_REGULAR_SEQUENCE, #)"

  - "(WALK_BACK_AND_COPY_REGULAR_SEQUENCE_IS_ON_REGULAR_SEQUENCE, a) -> (L, WALK_BACK_AND_COPY_REGULAR_SEQUENCE_IS_ON_REGULAR_SEQUENCE, a)"
  - "(WALK_BACK_AND_COPY_REGULAR_SEQUENCE_IS_ON_REGULAR_SEQUENCE, b) -> (L, WALK_BACK_AND_COPY_REGULAR_SEQUENCE_IS_ON_REGULAR_SEQUENCE, b)"
  - "(WALK_BACK_AND_COPY_REGULAR_SEQUENCE_IS_ON_REGULAR_SEQUENCE, 0) -> (R, APPEND_0_TO_STORAGE, a)"
  - "(WALK_BACK_AND_COPY_REGULAR_SEQUENCE_IS_ON_REGULAR_SEQUENCE, 1) -> (R, APPEND_1_TO_STORAGE, b)"
  - "(WALK_BACK_AND_COPY_REGULAR_SEQUENCE_IS_ON_REGULAR_SEQUENCE, #) -> (R, RESTORE_REGULAR_SEQUENCE, #)"

  - "(APPEND_0_TO_STORAGE, a) -> (R, APPEND_0_TO_STORAGE, a)"
  - "(APPEND_0_TO_STORAGE, b) -> (R, APPEND_0_TO_STORAGE, b)"
  - "(APPEND_0_TO_STORAGE, |) -> (R, APPEND_0_TO_STORAGE, |)"
  - "(APPEND_0_TO_STORAGE, 0) -> (R, APPEND_0_TO_STORAGE, 0)"
  - "(APPEND_0_TO_STORAGE, 1) -> (R, APPEND_0_TO_STORAGE, 1)"
  - "(APPEND_0_TO_STORAGE, #) -> (L, WALK_BACK_AND_COPY_REGULAR_SEQUENCE, 0)"

  - "(APPEND_1_TO_STORAGE, a) -> (R, APPEND_1_TO_STORAGE, a)"
  - "(APPEND_1_TO_STORAGE, b) -> (R, APPEND_1_TO_STORAGE, b)"
  - "(APPEND_1_TO_STORAGE, |) -> (R, APPEND_1_TO_STORAGE, |)"
  - "(APPEND_1_TO_STORAGE, 0) -> (R, APPEND_1_TO_STORAGE, 0)"
  - "(APPEND_1_TO_STORAGE, 1) -> (R, APPEND_1_TO_STORAGE, 1)"
  - "(APPEND_1_TO_STORAGE, #) -> (L, WALK_BACK_AND_COPY_REGULAR_SEQUENCE, 1)"

  - "(RESTORE_REGULAR_SEQUENCE, a) -> (R, RESTORE_REGULAR_SEQUENCE, 0)"
  - "(RESTORE_REGULAR_SEQUENCE, b) -> (R, RESTORE_REGULAR_SEQUENCE, 1)"
  - "(RESTORE_REGULAR_SEQUENCE, |) -> (R, RESTORE_REGULAR_SEQUENCE, |)"
  - "(RESTORE_REGULAR_SEQUENCE, 0) -> (R, RESTORE_REGULAR_SEQUENCE, 0)"
  - "(RESTORE_REGULAR_SEQUENCE, 1) -> (R, RESTORE_REGULAR_SEQUENCE, 1)"
  - "(RESTORE_REGULAR_SEQUENCE, #) -> (L, CHECK_FIND_NEXT_SYMBOL_ON_LEFT, #)"

  - "(CHECK_FIND_NEXT_SYMBOL_ON_LEFT, a) -> (L, CHECK_FIND_NEXT_SYMBOL_ON_LEFT, a)"
  - "(CHECK_FIND_NEXT_SYMBOL_ON_LEFT, b) -> (L, CHECK_FIND_NEXT_SYMBOL_ON_LEFT, b)"
  - "(CHECK_FIND_NEXT_SYMBOL_ON_LEFT, 0) -> (L, CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT, a)"
  - "(CHECK_FIND_NEXT_SYMBOL_ON_LEFT, 1) -> (L, CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT, b)"
  - "(CHECK_FIND_NEXT_SYMBOL_ON_LEFT, |) -> (L, FINAL_CHECK_IS_REGULAR_SEQUENCE_FULLY_CHECKED, |)"

  - "(CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT, 0) -> (L, CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT, 0)"
  - "(CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT, 1) -> (L, CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT, 1)"
  - "(CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT, |) -> (L, CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, |)"

  - "(CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, a) -> (L, CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, a)"
  - "(CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, b) -> (L, CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, b)"
  - "(CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, 0) -> (R, WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, a)"

  - "(CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT, 0) -> (L, CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT, 0)"
  - "(CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT, 1) -> (L, CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT, 1)"
  - "(CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT, |) -> (L, CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, |)"

  - "(CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, a) -> (L, CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, a)"
  - "(CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, b) -> (L, CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, b)"
  - "(CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE, 1) -> (R, WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, b)"

  - "(WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, a) -> (R, WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, a)"
  - "(WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, b) -> (R, WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, b)"
  - "(WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, 0) -> (R, WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, 0)"
  - "(WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, 1) -> (R, WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, 1)"
  - "(WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, |) -> (R, WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, |)"
  - "(WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER, #) -> (L, CHECK_FIND_NEXT_SYMBOL_ON_LEFT, #)"

  - "(FINAL_CHECK_IS_REGULAR_SEQUENCE_FULLY_CHECKED, a) -> (L, FINAL_CHECK_IS_REGULAR_SEQUENCE_FULLY_CHECKED, a)"
  - "(FINAL_CHECK_IS_REGULAR_SEQUENCE_FULLY_CHECKED, b) -> (L, FINAL_CHECK_IS_REGULAR_SEQUENCE_FULLY_CHECKED, b)"
  - "(FINAL_CHECK_IS_REGULAR_SEQUENCE_FULLY_CHECKED, #) -> (R, RESTORE_ORIGINAL_SEQUENCE_PART_1, #)"

  - "(RESTORE_ORIGINAL_SEQUENCE_PART_1, a) -> (R, RESTORE_ORIGINAL_SEQUENCE_PART_1, 0)"
  - "(RESTORE_ORIGINAL_SEQUENCE_PART_1, b) -> (R, RESTORE_ORIGINAL_SEQUENCE_PART_1, 1)"

  - "(RESTORE_ORIGINAL_SEQUENCE_PART_1, |) -> (R, RESTORE_ORIGINAL_SEQUENCE_PART_2, #)"
  - "(RESTORE_ORIGINAL_SEQUENCE_PART_2, a) -> (R, RESTORE_ORIGINAL_SEQUENCE_PART_2, #)"
  - "(RESTORE_ORIGINAL_SEQUENCE_PART_2, b) -> (R, RESTORE_ORIGINAL_SEQUENCE_PART_2, #)"
  - "(RESTORE_ORIGINAL_SEQUENCE_PART_2, #) -> (R, f, #)"
q:
  - "PLACE_DELIMITER_AT_END_OF_REGULAR_SEQUENCE"
  - "WALK_BACK_AND_COPY_REGULAR_SEQUENCE"
  - "WALK_BACK_AND_COPY_REGULAR_SEQUENCE_IS_ON_REGULAR_SEQUENCE"
  - "APPEND_0_TO_STORAGE"
  - "APPEND_1_TO_STORAGE"
  - "RESTORE_REGULAR_SEQUENCE"
  - "CHECK_FIND_NEXT_SYMBOL_ON_LEFT"
  - "CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT"
  - "CHECK_MUST_BE_0_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE"
  - "CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT"
  - "CHECK_MUST_BE_1_ON_REGULAR_SEQUENCE_NEXT_IS_ON_REGULAR_SEQUENCE"
  - "WALK_TO_END_AND_FIND_NEXT_CHECK_CHARACTER"
  - "FINAL_CHECK_IS_REGULAR_SEQUENCE_FULLY_CHECKED"
  - "RESTORE_ORIGINAL_SEQUENCE_PART_1"
  - "RESTORE_ORIGINAL_SEQUENCE_PART_2"
  - "f"
tape: "011001100110"
expected: "011001100110"
